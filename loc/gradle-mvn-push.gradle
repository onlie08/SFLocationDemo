apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}


def getDestUrl() {
    def base = "http://artifactory.sf-express.com/artifactory/"
    if (isReleaseBuild()) {
        return base + "maven-releases-local"
    } else {
        return base + "maven-snapshots-local"
    }
}

def isGpgSignature() {
    return SIGNING_ENABLE.contains("true") == true
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


artifacts {
    archives sourcesJar
}

signing {
    if (isGpgSignature()) {
        if(project.hasProperty('signing.keyId') &&
                project.hasProperty('signing.password') &&
                project.hasProperty('signing.secretKeyRingFile')) {
            sign configurations.archives
        } else {
            throw new InvalidUserDataException('singing configs error')
        }
    }
}


artifacts {
    archives(file("build/outputs/aar/library-standard-release.aar"))
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            def userName = properties.getProperty('sonatype.userName')
            def password = properties.getProperty('sonatype.password')

            if (userName && password) {
                if (isGpgSignature()) {//如果想做签名认证，需要下载Gpg4Win，安装并配置
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                } else {
                    println "Config not to sign ${project.name}"
                }
                repository(url: getDestUrl()) {
                    authentication(userName: userName, password: password)
                }
            } else {
                throw new InvalidUserDataException('Config your maven repository user name and password in rootProject/local.properties')
            }

            if (project.hasProperty('GROUP')) {
                pom.groupId = GROUP
            } else {
                throw new InvalidUserDataException('Config GROUP in rootProject/gradle.properties')
            }

            if (project.hasProperty('POM_ARTIFACT_ID')) {
                pom.artifactId = POM_ARTIFACT_ID
            } else {
                throw new InvalidUserDataException('Config POM_ARTIFACT_ID in rootProject/gradle.properties')
            }

            if (project.hasProperty('VERSION_NAME')) {
                pom.version = VERSION_NAME
            }
            pom.project {
                if (project.hasProperty('POM_NAME')) {
                    name POM_NAME
                }
                packaging 'aar'
                developers {
                    developer {
                        id 'gis'
                        name 'gis'
                    }
                }
            }
        }
    }
}